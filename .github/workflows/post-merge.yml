name: Deployment on PR Merge

on:
  pull_request:
    types:
      - closed

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: "${{ secrets.DB_NAME }}"
          MYSQL_USER: "${{ secrets.DB_USER }}"
          MYSQL_PASSWORD: "${{ secrets.DB_PASS }}"
          MYSQL_ROOT_PASSWORD: "${{ secrets.DB_PASS }}"
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -u root --password=$MYSQL_ROOT_PASSWORD --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Dependencies
        run: npm ci

      - name: Install Required Packages
        run: npm install aws-sdk file-type dotenv mysql2 chai supertest mocha sinon winston node-statsd

      - name: Create .env File Using Secrets
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}" >> .env
          echo "DB_PORT=3306" >> .env
          echo "PORT=3001" >> .env
          chmod 600 .env

      - name: Wait for MySQL to be Ready
        run: |
          for i in {1..15}; do
            if mysqladmin ping -h 127.0.0.1 -u"${{ secrets.DB_USER }}" -p"${{ secrets.DB_PASS }}" --silent; then
              echo "MySQL is ready!"
              exit 0
            fi
            echo "Waiting for MySQL to be ready..."
            sleep 5
          done
          echo "MySQL did not start in time." && exit 1

      - name: Start Web Application
        run: |
          echo "Starting the web application..."
          npm start &
          sleep 5
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          PORT: 3001

      - name: Run integration-test
        run: |
          echo "Running tests after waiting for application to fully initialize..."
          sleep 5
          npm test

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Building the Artifacts (Including `tests` Folder)
        run: |
          mkdir -p build
          cp app.js package.json package-lock.json -r tests build/
          zip -r webapp.zip build/

      - name: Install Packer
        run: |
          curl -fsSL https://releases.hashicorp.com/packer/1.7.0/packer_1.7.0_linux_amd64.zip -o packer.zip
          unzip packer.zip
          sudo mv packer /usr/local/bin/
          packer --version

      - name: Initialize and Validate Packer Template
        run: |
          packer init packer.pkr.hcl
          packer validate packer.pkr.hcl

      - name: Build Packer AMI in Dev Account
        run: |
          packer build packer.pkr.hcl
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Retrieve AMI ID
        run: |
          echo "AMI_ID=$(jq -r '.builds[-1].artifact_id' ./manifest.json | awk -F ':' '{print $2}' | xargs)" >> $GITHUB_ENV

      - name: Create new Launch Template version in Demo
        id: lt
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AMI_ID: ${{ env.AMI_ID }}
        run: |
          echo "ðŸš€ Creating new Launch Template version with AMI: $AMI_ID"

          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-name csye6225-webapp \
            --source-version 1 \
            --launch-template-data "{\"ImageId\":\"$AMI_ID\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text \
            --region $AWS_REGION)

          echo "Launch Template version created: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "lt_version=$NEW_VERSION" >> $GITHUB_OUTPUT
